// Generated by sprotodump. DO NOT EDIT!
// source: ../gen_example/TestMap.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class MetaData : SprotoTypeBase {
		private static int max_field_count = 6;
		
		public class Info : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private string _v1; // tag 1
			public string v1 {
				get { return _v1; }
				set { base.has_field.set_field (0, true); _v1 = value; }
			}
			public bool HasV1 {
				get { return base.has_field.has_field (0); }
			}

			private bool _v2; // tag 2
			public bool v2 {
				get { return _v2; }
				set { base.has_field.set_field (1, true); _v2 = value; }
			}
			public bool HasV2 {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _v3; // tag 3
			public Int64 v3 {
				get { return _v3; }
				set { base.has_field.set_field (2, true); _v3 = value; }
			}
			public bool HasV3 {
				get { return base.has_field.has_field (2); }
			}

			public Info () : base(max_field_count) {}

			public Info (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 1:
						this.v1 = base.deserialize.read_string ();
						break;
					case 2:
						this.v2 = base.deserialize.read_boolean ();
						break;
					case 3:
						this.v3 = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.v1, 1);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_boolean (this.v2, 2);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.v3, 3);
				}

				return base.serialize.close ();
			}
		}


		
		private string _name; // tag 0
		public string name {
			get { return _name; }
			set { base.has_field.set_field (0, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _id; // tag 1
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (1, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (1); }
		}

		private Dictionary<string, MetaData.Info> _d1; // tag 2
		public Dictionary<string, MetaData.Info> d1 {
			get { return _d1; }
			set { base.has_field.set_field (2, true); _d1 = value; }
		}
		public bool HasD1 {
			get { return base.has_field.has_field (2); }
		}

		private Dictionary<bool, MetaData.Info> _d2; // tag 3
		public Dictionary<bool, MetaData.Info> d2 {
			get { return _d2; }
			set { base.has_field.set_field (3, true); _d2 = value; }
		}
		public bool HasD2 {
			get { return base.has_field.has_field (3); }
		}

		private Dictionary<Int64, MetaData.Info> _d3; // tag 4
		public Dictionary<Int64, MetaData.Info> d3 {
			get { return _d3; }
			set { base.has_field.set_field (4, true); _d3 = value; }
		}
		public bool HasD3 {
			get { return base.has_field.has_field (4); }
		}

		private List<MetaData.Info> _a1; // tag 5
		public List<MetaData.Info> a1 {
			get { return _a1; }
			set { base.has_field.set_field (5, true); _a1 = value; }
		}
		public bool HasA1 {
			get { return base.has_field.has_field (5); }
		}

		public MetaData () : base(max_field_count) {}

		public MetaData (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.name = base.deserialize.read_string ();
					break;
				case 1:
					this.id = base.deserialize.read_integer ();
					break;
				case 2:
					this.d1 = base.deserialize.read_map<string, MetaData.Info>(v => v.v1);
					break;
				case 3:
					this.d2 = base.deserialize.read_map<bool, MetaData.Info>(v => v.v2);
					break;
				case 4:
					this.d3 = base.deserialize.read_map<Int64, MetaData.Info>(v => v.v3);
					break;
				case 5:
					this.a1 = base.deserialize.read_obj_list<MetaData.Info> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.name, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.id, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_obj (this.d1, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_obj (this.d2, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_obj (this.d3, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_obj (this.a1, 5);
			}

			return base.serialize.close ();
		}
	}


}

